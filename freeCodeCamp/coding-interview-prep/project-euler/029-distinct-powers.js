// https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-29-distinct-powers
// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
// 2^2=4, 2^3=8, 2^4=16, 2^5=32
// 3^2=9, 3^3=27, 3^4=81, 3^5=243
// 4^2=16, 4^3=64, 4^4=256, 4^5=1024
// 5^2=25, 5^3=125, 5^4=625, 5^5=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ n and 2 ≤ b ≤ n?

// brute-force with BigInt
function distinctPowers(n) {

    let result = new Set();

    for (let a = 2; a <= n; a++) {
        for (let p = 2; p <= n; p++) {
            result.add(BigInt(a) ** BigInt(p));
        }
    }

    return result.size;
}



// manual calculation of big numbers
function distinctPowers(exponent) {

    // helper to raise a number to a power and return as string
    const manualPower = (base, power) => {        
        let numberString = '1';
        
        for (let m = 1; m <= power; m++) {
            let multiplied = '';
            let remainder = 0;
            for (let i = numberString.length - 1; i >= 0; i--) {
                const product = +numberString[i] * base + remainder;
                multiplied =  product % 10 + multiplied;
                remainder = Math.floor(product / 10);
            }
    
            if (remainder !== 0) {
                multiplied = remainder + multiplied;    
            }
    
            numberString = multiplied;
        }
        
        return numberString;
    };

    let result = new Set();

    for (let a = 2; a <= exponent; a++) {
        for (let p = 2; p <= exponent; p++) {
            result.add(manualPower(a, p));
        }
    }

    return result.size;
}

console.log(distinctPowers(15), 177);
console.log(distinctPowers(20), 324);
console.log(distinctPowers(25), 519);
console.log(distinctPowers(30), 755);